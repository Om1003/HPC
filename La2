#include <iostream>
#include <ctime>
#include <cstdlib>
#include <omp.h>
 
using namespace std;
 
void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n - 1; ++i) {
        for (int j = 0; j < n - i - 1; ++j) {
            if (arr[j] > arr[j + 1]) {
                swap(arr[j], arr[j + 1]);
            }
        }
    }
}
 
void printArray(int arr[], int size) {
    for (int i = 0; i < size; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;
}
 
int main() {
    int n, choice;
    cout << "Enter size of array: ";
    cin >> n;
 
    int* arr = new int[n];
 
    cout << "Choose input method:\n1. User Input\n2. Random Input\nEnter choice (1 or 2): ";
    cin >> choice;
 
    if (choice == 1) {
        cout << "Enter " << n << " elements: " << endl;
        for (int i = 0; i < n; ++i) {
            cin >> arr[i];
        }
    } else if (choice == 2) {
        srand(time(0));
        for (int i = 0; i < n; ++i) {
            arr[i] = rand() % 100;
        }
        cout << "Randomly generated array: ";
        printArray(arr, n);
    } else {
        cout << "Invalid choice. Exiting." << endl;
        delete[] arr;
        return 0;
    }
 
    // Copy the original array for parallel sort
    int* arr_parallel = new int[n];
    for (int i = 0; i < n; ++i) {
        arr_parallel[i] = arr[i];
    }
 
    // Sequential Bubble Sort
    clock_t start = clock();
    bubbleSort(arr, n);
    clock_t end = clock();
    double sequentialTime = double(end - start) / CLOCKS_PER_SEC;
 
    cout << "Sorted array (sequential): ";
    printArray(arr, n);
 
    // Parallel Bubble Sort
    start = clock();
    #pragma omp parallel
    {
        #pragma omp single
        {
            bubbleSort(arr_parallel, n);
        }
    }
    end = clock();
    double parallelTime = double(end - start) / CLOCKS_PER_SEC;
 
    cout << "Sorted array (parallel): ";
    printArray(arr_parallel, n);
 
    cout << "Sequential Bubble Sort Time: " << sequentialTime << " seconds" << endl;
    cout << "Parallel Bubble Sort Time: " << parallelTime << " seconds" << endl;
 
    delete[] arr;
    delete[] arr_parallel;
 
    return 0;
}
